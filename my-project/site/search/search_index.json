{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A module loading framework for Roblox created by @ChiefWildin . What's so special about Order? The purpose of Order is to simplify the way you structure your game projects. It combines the best features of the most popular frameworks, and adds a few of its own. Are there any unique features in Order? One of the main goals I wanted to achieve with Order was the ability to have modules with circular dependencies. I've achieved this through a little bait-and-switch style tactic, and it is now fully compatible with these kinds of modules!","title":"Home"},{"location":"#_1","text":"A module loading framework for Roblox created by @ChiefWildin .","title":""},{"location":"#whats-so-special-about-order","text":"The purpose of Order is to simplify the way you structure your game projects. It combines the best features of the most popular frameworks, and adds a few of its own.","title":"What's so special about Order?"},{"location":"#are-there-any-unique-features-in-order","text":"One of the main goals I wanted to achieve with Order was the ability to have modules with circular dependencies. I've achieved this through a little bait-and-switch style tactic, and it is now fully compatible with these kinds of modules!","title":"Are there any unique features in Order?"},{"location":"api/","text":"API File structure Tasks Tasks are modules that have code intended for immediate execution at runtime. This code should be placed in a function called :Init() . Tasks should be placed in the tasks folder of the appropriate context. Example local NewTask = {} function NewTask:Init() print(\"We're running a task!\") end return NewTask Everything else All other modules should be placed in the lib folder, or any other custom folders that you create. Note that by default, Order will only recognize top-level modules in a folder, but those can be buried as many folders deep as you'd like. Loading dependencies Order makes use of the shared global variable to load dependencies. In code, this takes the place of the usual require keyword. This function can take either a string of the module's name, or a direct object reference to a ModuleScript. For example: local Tweentown = shared(\"Tweentown\") Supporting modules from other frameworks If you would like to import a module from another framework that uses require to load dependencies, simply add the following line to the beginning of the file: local require = shared","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#file-structure","text":"","title":"File structure"},{"location":"api/#tasks","text":"Tasks are modules that have code intended for immediate execution at runtime. This code should be placed in a function called :Init() . Tasks should be placed in the tasks folder of the appropriate context.","title":"Tasks"},{"location":"api/#example","text":"local NewTask = {} function NewTask:Init() print(\"We're running a task!\") end return NewTask","title":"Example"},{"location":"api/#everything-else","text":"All other modules should be placed in the lib folder, or any other custom folders that you create. Note that by default, Order will only recognize top-level modules in a folder, but those can be buried as many folders deep as you'd like.","title":"Everything else"},{"location":"api/#loading-dependencies","text":"Order makes use of the shared global variable to load dependencies. In code, this takes the place of the usual require keyword. This function can take either a string of the module's name, or a direct object reference to a ModuleScript. For example: local Tweentown = shared(\"Tweentown\")","title":"Loading dependencies"},{"location":"api/#supporting-modules-from-other-frameworks","text":"If you would like to import a module from another framework that uses require to load dependencies, simply add the following line to the beginning of the file: local require = shared","title":"Supporting modules from other frameworks"},{"location":"gettingstarted/","text":"Getting started Rojo Clone the repo The repository for Order can be found here Roblox Get the package If you have some sort of grudge against Rojo for whatever reason, you can also get Order directly from the Roblox catalog here (COMING SOON)","title":"Getting started"},{"location":"gettingstarted/#getting-started","text":"","title":"Getting started"},{"location":"gettingstarted/#rojo","text":"","title":"Rojo"},{"location":"gettingstarted/#clone-the-repo","text":"The repository for Order can be found here","title":"Clone the repo"},{"location":"gettingstarted/#roblox","text":"","title":"Roblox"},{"location":"gettingstarted/#get-the-package","text":"If you have some sort of grudge against Rojo for whatever reason, you can also get Order directly from the Roblox catalog here (COMING SOON)","title":"Get the package"},{"location":"rules/","text":"The rules of Order No bare code in modules with circular dependencies In order to support circular dependencies, it must be guaranteed that the module in question has no bare code that references a circular dependency . That is to say that any code that references the circular dependency must be contained within a function. Module names must be unique In order to support loading dependencies by name, Order requires that module names using this feature be unique. Otherwise, it would be impossible to know which module with that name you would like to reference. Developers that would like to use submodules with non-unique names can do so, by setting the flag Order.IndexSubmodules to false . Note that this will disable the ability to load these submodules by name.","title":"Rules"},{"location":"rules/#the-rules-of-order","text":"","title":"The rules of Order"},{"location":"rules/#no-bare-code-in-modules-with-circular-dependencies","text":"In order to support circular dependencies, it must be guaranteed that the module in question has no bare code that references a circular dependency . That is to say that any code that references the circular dependency must be contained within a function.","title":"No bare code in modules with circular dependencies"},{"location":"rules/#module-names-must-be-unique","text":"In order to support loading dependencies by name, Order requires that module names using this feature be unique. Otherwise, it would be impossible to know which module with that name you would like to reference. Developers that would like to use submodules with non-unique names can do so, by setting the flag Order.IndexSubmodules to false . Note that this will disable the ability to load these submodules by name.","title":"Module names must be unique"}]}